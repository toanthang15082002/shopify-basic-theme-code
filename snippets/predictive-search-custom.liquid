{% comment %}theme-check-disable ImgLazyLoading{% endcomment %}
{% comment %} {%- if predictive_search.performed -%} {% endcomment %}
<script src="{{ 'predictive-search-custom.js' | asset_url }}"></script>
{% if settings.enable_search %}
  <div x-data="searchComponent" class="relative max-w-6xl w-full ml-4">
    <div class="max-w-[62rem] mx-auto w-full border-b">
      <div class="relative field pr-5 lg:pr-0 flex">
        {% if settings.enable_refined_search_box %}
          <div class="md:relative search-categories flex items-center flex-shrink-0">
            <div
              class="inline-flex lg:inline-block border-r mr-2 pr-3.5"
              x-data="open: false"
              @keyup.escape="open = false"
            >
              <select class="bg-transparent outline-none text-gray-500 mr-2">
                <option
                  value="all"
                  class="absolute pt-6 pb-7 z-50 left-0 top-[calc(100%+12px)] lg:bottom-auto background-header shadow-[0_0_6px_-4px_rgba(var(--colors-text))]"
                >
                  All categories
                </option>
              </select>
            </div>
          </div>
        {% endif %}
        <form
          class="grow"
          action="/search"
          method="get"
          role="search"
        >
          <input
            type="text"
            name="q"
            class="peer input-search focus-visible:outline-none py-3 pr-[4.5rem] pl-4 lg:pl-2 lg:pr-20 text-left w-full appearance-none relative outline-none bg-transparent placeholder:text-current placeholder:opacity-60"
            value=""
            x-on:keyup="keyUp()"
            @focus="focusForm()"
            autofocus=""
            placeholder="Search..."
            x-ref="input_search"
          >
          <button class="absolute none_border w-7 h-7 p-1 top-1/2 -translate-y-1/2 opacity-60 bg-none text-current lg:right-2 right-2">
            <svg
              class="w-5 h-5"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-4.35-4.35m0 0a7.5 7.5 0 10-10.6-10.6 7.5 7.5 0 0010.6 10.6z"/>
            </svg>
          </button>
        </form>
      </div>
      {% comment %} Hoàn thiện nốt show popup kết quả {% endcomment %}
      <div
        x-show="open"
        class="absolute bg-white w-full mt-2 rounded-lg shadow-lg max-h-48 overflow-y-auto"
        x-transition
      >
        <ul>
          <template x-for="item in results" :key="item.id">
            <li class="p-2">
              <a :href="item.url" class="flex items-center">
                <img :src="item.image" alt="" class="w-10 h-10 mr-2 rounded">
                <div>
                  <p x-text="item.title" class="text-gray-800"></p>
                  {% if settings.search_show_price %}
                    <span x-show="showPrice" x-text="item.price" class="text-sm text-gray-500"></span>
                  {% endif %}
                  {% if settings.search_show_vendor %}
                    <span x-show="showVendor" x-text="item.vendor" class="text-sm text-gray-500"></span>
                  {% endif %}
                </div>
              </a>
            </li>
          </template>
        </ul>
      </div>
    </div>
  </div>
{% endif %}
<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('searchComponent', () => ({
      query: '',
      results: [],
      open: false,
      showPrice: {{ settings.search_show_price | json }},
      showVendor: {{ settings.search_show_vendor | json }},

      async fetchResults() {
        if (this.query.length < 2) {
          this.results = [];
          return;
        }

        const searchUrl = `/search/suggest.json?q=${this.query}&resources[type]=product&resources[limit]=5&section_id=predictive-search-custom`;

        try {
          const response = await fetch(searchUrl);
          const searchData = await response.json();

          this.results = searchData.resources.results.products.map((productData) => ({
            id: productData.id,
            title: productData.title,
            image: productData.featured_image.url,
            url: productData.url,
          }));
        } catch (error) {
          console.error('Error fetching search results:', error);
        }
      },

      closeResults() {
        this.open = false;
      }
    }));
  });
</script>
